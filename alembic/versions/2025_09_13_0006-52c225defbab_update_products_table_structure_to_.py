"""update_products_table_structure_to_match_models

Revision ID: 52c225defbab
Revises: 2b02360f3de8
Create Date: 2025-09-13 00:06:34.668340

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '52c225defbab'
down_revision: Union[str, None] = '2b02360f3de8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_reports_content', table_name='analysis_reports', postgresql_using='gin')
    op.drop_index('idx_reports_created', table_name='analysis_reports')
    op.drop_index('idx_reports_product_type', table_name='analysis_reports')
    op.drop_index('idx_reports_tenant', table_name='analysis_reports')
    op.drop_table('analysis_reports')
    op.drop_index('idx_suggestions_product', table_name='optimization_suggestions')
    op.drop_index('idx_suggestions_status', table_name='optimization_suggestions')
    op.drop_index('idx_suggestions_tenant', table_name='optimization_suggestions')
    op.drop_index('idx_suggestions_type_priority', table_name='optimization_suggestions')
    op.drop_table('optimization_suggestions')
    op.drop_index('idx_tracking_bsr', table_name='product_tracking_data', postgresql_where='(bsr IS NOT NULL)')
    op.drop_index('idx_tracking_created_at', table_name='product_tracking_data')
    op.drop_index('idx_tracking_price', table_name='product_tracking_data', postgresql_where='(price IS NOT NULL)')
    op.drop_index('idx_tracking_product_date', table_name='product_tracking_data')
    op.drop_index('idx_tracking_tenant_date', table_name='product_tracking_data')
    op.drop_table('product_tracking_data')
    op.drop_index('idx_logs_created', table_name='system_logs')
    op.drop_index('idx_logs_level', table_name='system_logs')
    op.drop_index('idx_logs_tenant', table_name='system_logs', postgresql_where='(tenant_id IS NOT NULL)')
    op.drop_index('idx_logs_trace', table_name='system_logs', postgresql_where='(trace_id IS NOT NULL)')
    op.drop_table('system_logs')
    op.drop_index('idx_tasks_status_priority', table_name='tasks')
    op.drop_index('idx_tasks_tenant', table_name='tasks')
    op.drop_index('idx_tasks_type', table_name='tasks')
    op.drop_index('idx_tasks_user', table_name='tasks', postgresql_where='(user_id IS NOT NULL)')
    op.drop_table('tasks')
    op.drop_index('idx_categories_auto_crawl', table_name='categories', postgresql_where='(auto_crawl = true)')
    op.drop_index('idx_categories_tenant', table_name='categories')
    op.drop_table('categories')
    op.drop_index('idx_competitor_data', table_name='competitor_data', postgresql_using='gin')
    op.drop_index('idx_competitor_parent', table_name='competitor_data')
    op.drop_index('idx_competitor_status', table_name='competitor_data')
    op.drop_index('idx_competitor_tenant', table_name='competitor_data')
    op.drop_table('competitor_data')
    op.add_column('api_keys', sa.Column('key_id', sa.String(length=32), nullable=False))
    op.add_column('api_keys', sa.Column('scopes', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('api_keys', sa.Column('allowed_ips', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('api_keys', sa.Column('rate_limit_per_minute', sa.Integer(), nullable=True))
    op.add_column('api_keys', sa.Column('rate_limit_per_day', sa.Integer(), nullable=True))
    op.add_column('api_keys', sa.Column('status', sa.String(length=20), nullable=True))
    op.alter_column('api_keys', 'key_prefix',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=8),
               existing_nullable=False)
    op.alter_column('api_keys', 'user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('api_keys', 'usage_count',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True,
               existing_server_default=sa.text("'0'::bigint"))
    op.drop_index('idx_api_keys_active', table_name='api_keys', postgresql_where='(is_active = true)')
    op.drop_index('idx_api_keys_expires', table_name='api_keys', postgresql_where='(expires_at IS NOT NULL)')
    op.drop_index('idx_api_keys_hash', table_name='api_keys')
    op.drop_index('idx_api_keys_tenant', table_name='api_keys')
    op.drop_index('idx_api_keys_user', table_name='api_keys')
    op.create_index('ix_api_key_expires', 'api_keys', ['expires_at'], unique=False)
    op.create_index('ix_api_key_user_status', 'api_keys', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_api_keys_id'), 'api_keys', ['id'], unique=False)
    op.create_index(op.f('ix_api_keys_is_deleted'), 'api_keys', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_api_keys_key_id'), 'api_keys', ['key_id'], unique=True)
    op.create_index(op.f('ix_api_keys_status'), 'api_keys', ['status'], unique=False)
    op.create_index(op.f('ix_api_keys_user_id'), 'api_keys', ['user_id'], unique=False)
    op.drop_constraint('api_keys_tenant_id_fkey', 'api_keys', type_='foreignkey')
    op.drop_constraint('api_keys_user_id_fkey', 'api_keys', type_='foreignkey')
    op.create_foreign_key(None, 'api_keys', 'users', ['user_id'], ['id'])
    op.drop_column('api_keys', 'rate_limit')
    op.drop_column('api_keys', 'tenant_id')
    op.drop_column('api_keys', 'permissions')
    op.drop_column('api_keys', 'api_key_id')
    op.drop_column('api_keys', 'is_active')
    # 创建其他枚举类型（如果不存在）
    op.execute("""
    DO $$ BEGIN
        CREATE TYPE marketplacetype AS ENUM ('AMAZON_US', 'AMAZON_UK', 'AMAZON_DE', 'AMAZON_FR', 'AMAZON_JP', 'AMAZON_CA', 'AMAZON_AU', 'AMAZON_IN');
    EXCEPTION
        WHEN duplicate_object THEN null;
    END $$;
    """)
    op.execute("""
    DO $$ BEGIN
        CREATE TYPE trackingfrequency AS ENUM ('HOURLY', 'EVERY_6_HOURS', 'DAILY', 'WEEKLY', 'MONTHLY');
    EXCEPTION
        WHEN duplicate_object THEN null;
    END $$;
    """)
    
    op.add_column('products', sa.Column('marketplace', sa.Enum('AMAZON_US', 'AMAZON_UK', 'AMAZON_DE', 'AMAZON_FR', 'AMAZON_JP', 'AMAZON_CA', 'AMAZON_AU', 'AMAZON_IN', name='marketplacetype'), nullable=False, server_default='AMAZON_US'))
    op.add_column('products', sa.Column('image_url', sa.Text(), nullable=True))
    op.add_column('products', sa.Column('tracking_frequency', sa.Enum('HOURLY', 'EVERY_6_HOURS', 'DAILY', 'WEEKLY', 'MONTHLY', name='trackingfrequency'), nullable=False, server_default='DAILY'))
    op.add_column('products', sa.Column('is_competitor', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('products', sa.Column('buy_box_price', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('products', sa.Column('current_rank', sa.Integer(), nullable=True))
    op.add_column('products', sa.Column('current_rating', sa.Numeric(precision=3, scale=2), nullable=True))
    op.add_column('products', sa.Column('current_review_count', sa.Integer(), nullable=True))
    op.add_column('products', sa.Column('current_availability', sa.String(length=50), nullable=True))
    op.add_column('products', sa.Column('product_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('products', sa.Column('last_scraped_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('products', sa.Column('last_error', sa.Text(), nullable=True))
    op.add_column('products', sa.Column('error_count', sa.Integer(), nullable=False))
    op.add_column('products', sa.Column('price_alert_threshold', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('products', sa.Column('rank_alert_threshold', sa.Integer(), nullable=True))
    op.add_column('products', sa.Column('notes', sa.Text(), nullable=True))
    op.add_column('products', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('products', 'asin',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=20),
               existing_nullable=False)
    op.alter_column('products', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               nullable=False)
    op.alter_column('products', 'brand',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=True)
    op.alter_column('products', 'category',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=True)
    # 创建枚举类型（如果不存在）
    op.execute("""
    DO $$ BEGIN
        CREATE TYPE productstatus AS ENUM ('ACTIVE', 'INACTIVE', 'DELETED', 'MONITORING', 'ERROR');
    EXCEPTION
        WHEN duplicate_object THEN null;
    END $$;
    """)
    
    # 安全转换status列 - 将现有值映射到枚举值
    op.execute("UPDATE products SET status = 'ACTIVE' WHERE status = 'active'")
    op.execute("UPDATE products SET status = 'INACTIVE' WHERE status = 'inactive'") 
    op.execute("UPDATE products SET status = 'DELETED' WHERE status = 'deleted'")
    op.execute("UPDATE products SET status = 'MONITORING' WHERE status = 'monitoring'")
    op.execute("UPDATE products SET status = 'ERROR' WHERE status = 'error'")
    op.execute("UPDATE products SET status = 'ACTIVE' WHERE status NOT IN ('ACTIVE', 'INACTIVE', 'DELETED', 'MONITORING', 'ERROR')")
    
    # 转换列类型 - 分步骤进行
    # 1. 首先删除默认值
    op.alter_column('products', 'status', server_default=None)
    
    # 2. 转换列类型
    op.alter_column('products', 'status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.Enum('ACTIVE', 'INACTIVE', 'DELETED', 'MONITORING', 'ERROR', name='productstatus'),
               nullable=False,
               postgresql_using='status::productstatus')
    
    # 3. 设置新的默认值
    op.alter_column('products', 'status', server_default='ACTIVE')
    op.drop_index('idx_products_category', table_name='products')
    op.drop_index('idx_products_product_id', table_name='products')
    op.drop_index('idx_products_status', table_name='products')
    op.drop_index('idx_products_tenant_asin', table_name='products')
    op.drop_index('idx_products_user', table_name='products')
    op.drop_constraint('products_tenant_id_asin_key', 'products', type_='unique')
    op.create_index('ix_product_last_scraped', 'products', ['last_scraped_at'], unique=False)
    op.create_index('ix_product_marketplace_asin', 'products', ['marketplace', 'asin'], unique=False)
    op.create_index('ix_product_tenant_status', 'products', ['tenant_id', 'status'], unique=False)
    op.create_index('ix_product_tracking_frequency', 'products', ['tracking_frequency'], unique=False)
    op.create_index(op.f('ix_products_asin'), 'products', ['asin'], unique=False)
    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)
    op.create_index(op.f('ix_products_is_deleted'), 'products', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_products_tenant_id'), 'products', ['tenant_id'], unique=False)
    op.create_unique_constraint('uq_product_asin_marketplace_tenant', 'products', ['asin', 'marketplace', 'tenant_id'])
    op.drop_constraint('products_tenant_id_fkey', 'products', type_='foreignkey')
    op.drop_constraint('products_user_id_fkey', 'products', type_='foreignkey')
    op.drop_column('products', 'crawl_frequency')
    op.drop_column('products', 'image_urls')
    op.drop_column('products', 'product_id')
    op.drop_column('products', 'description')
    op.drop_column('products', 'availability')
    op.drop_column('products', 'user_id')
    op.drop_column('products', 'rating')
    op.drop_column('products', 'review_count')
    op.drop_column('products', 'features')
    op.drop_column('products', 'list_price')
    op.drop_column('products', 'bsr_rank')
    op.drop_index('idx_tenants_created_at', table_name='tenants')
    op.drop_index('idx_tenants_subscription_status', table_name='tenants')
    op.drop_constraint('tenants_tenant_id_key', 'tenants', type_='unique')
    op.drop_index('ix_tenants_tenant_id', table_name='tenants')
    op.create_index(op.f('ix_tenants_tenant_id'), 'tenants', ['tenant_id'], unique=True)
    op.create_index(op.f('ix_tenants_id'), 'tenants', ['id'], unique=False)
    op.drop_index('idx_sessions_active', table_name='user_sessions', postgresql_where='(is_active = true)')
    op.drop_index('idx_sessions_cleanup', table_name='user_sessions', postgresql_where='(is_active = false)')
    op.drop_constraint('user_sessions_jwt_jti_key', 'user_sessions', type_='unique')
    op.drop_constraint('user_sessions_refresh_token_key', 'user_sessions', type_='unique')
    op.drop_constraint('user_sessions_session_id_key', 'user_sessions', type_='unique')
    op.drop_index('ix_user_sessions_session_id', table_name='user_sessions')
    op.create_index(op.f('ix_user_sessions_session_id'), 'user_sessions', ['session_id'], unique=True)
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_user_sessions_jwt_jti'), 'user_sessions', ['jwt_jti'], unique=True)
    op.create_index(op.f('ix_user_sessions_refresh_token'), 'user_sessions', ['refresh_token'], unique=True)
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.drop_index('idx_users_email_verified', table_name='users', postgresql_where='(is_email_verified = true)')
    op.drop_index('idx_users_last_login', table_name='users', postgresql_where='(last_login_at IS NOT NULL)')
    op.drop_index('idx_users_status_tenant', table_name='users', postgresql_where="(status = 'ACTIVE'::userstatus)")
    op.create_index(op.f('ix_users_email_verification_token'), 'users', ['email_verification_token'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_password_reset_token'), 'users', ['password_reset_token'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_password_reset_token'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email_verification_token'), table_name='users')
    op.create_index('idx_users_status_tenant', 'users', ['status', 'tenant_id'], unique=False, postgresql_where="(status = 'ACTIVE'::userstatus)")
    op.create_index('idx_users_last_login', 'users', [sa.literal_column('last_login_at DESC')], unique=False, postgresql_where='(last_login_at IS NOT NULL)')
    op.create_index('idx_users_email_verified', 'users', ['is_email_verified'], unique=False, postgresql_where='(is_email_verified = true)')
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_refresh_token'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_jwt_jti'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_session_id'), table_name='user_sessions')
    op.create_index('ix_user_sessions_session_id', 'user_sessions', ['session_id'], unique=False)
    op.create_unique_constraint('user_sessions_session_id_key', 'user_sessions', ['session_id'])
    op.create_unique_constraint('user_sessions_refresh_token_key', 'user_sessions', ['refresh_token'])
    op.create_unique_constraint('user_sessions_jwt_jti_key', 'user_sessions', ['jwt_jti'])
    op.create_index('idx_sessions_cleanup', 'user_sessions', ['expires_at'], unique=False, postgresql_where='(is_active = false)')
    op.create_index('idx_sessions_active', 'user_sessions', ['is_active', 'expires_at'], unique=False, postgresql_where='(is_active = true)')
    op.drop_index(op.f('ix_tenants_id'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_tenant_id'), table_name='tenants')
    op.create_index('ix_tenants_tenant_id', 'tenants', ['tenant_id'], unique=False)
    op.create_unique_constraint('tenants_tenant_id_key', 'tenants', ['tenant_id'])
    op.create_index('idx_tenants_subscription_status', 'tenants', ['subscription_status'], unique=False)
    op.create_index('idx_tenants_created_at', 'tenants', [sa.literal_column('created_at DESC')], unique=False)
    op.add_column('products', sa.Column('bsr_rank', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('list_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('features', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('review_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('rating', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('availability', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('product_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('image_urls', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('crawl_frequency', sa.VARCHAR(length=50), server_default=sa.text("'daily'::character varying"), autoincrement=False, nullable=True))
    op.create_foreign_key('products_user_id_fkey', 'products', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('products_tenant_id_fkey', 'products', 'tenants', ['tenant_id'], ['tenant_id'], ondelete='CASCADE')
    op.drop_constraint('uq_product_asin_marketplace_tenant', 'products', type_='unique')
    op.drop_index(op.f('ix_products_tenant_id'), table_name='products')
    op.drop_index(op.f('ix_products_is_deleted'), table_name='products')
    op.drop_index(op.f('ix_products_id'), table_name='products')
    op.drop_index(op.f('ix_products_asin'), table_name='products')
    op.drop_index('ix_product_tracking_frequency', table_name='products')
    op.drop_index('ix_product_tenant_status', table_name='products')
    op.drop_index('ix_product_marketplace_asin', table_name='products')
    op.drop_index('ix_product_last_scraped', table_name='products')
    op.create_unique_constraint('products_tenant_id_asin_key', 'products', ['tenant_id', 'asin'])
    op.create_index('idx_products_user', 'products', ['user_id'], unique=False)
    op.create_index('idx_products_tenant_asin', 'products', ['tenant_id', 'asin'], unique=False)
    op.create_index('idx_products_status', 'products', ['status'], unique=False)
    op.create_index('idx_products_product_id', 'products', ['product_id'], unique=False)
    op.create_index('idx_products_category', 'products', ['tenant_id', 'category'], unique=False)
    op.alter_column('products', 'status',
               existing_type=sa.Enum('ACTIVE', 'INACTIVE', 'DELETED', 'MONITORING', 'ERROR', name='productstatus'),
               type_=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'active'::character varying"))
    op.alter_column('products', 'category',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('products', 'brand',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.alter_column('products', 'title',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('products', 'asin',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.drop_column('products', 'tags')
    op.drop_column('products', 'notes')
    op.drop_column('products', 'rank_alert_threshold')
    op.drop_column('products', 'price_alert_threshold')
    op.drop_column('products', 'error_count')
    op.drop_column('products', 'last_error')
    op.drop_column('products', 'last_scraped_at')
    op.drop_column('products', 'product_data')
    op.drop_column('products', 'current_availability')
    op.drop_column('products', 'current_review_count')
    op.drop_column('products', 'current_rating')
    op.drop_column('products', 'current_rank')
    op.drop_column('products', 'buy_box_price')
    op.drop_column('products', 'is_competitor')
    op.drop_column('products', 'tracking_frequency')
    op.drop_column('products', 'image_url')
    op.drop_column('products', 'marketplace')
    op.add_column('api_keys', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('api_keys', sa.Column('api_key_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False))
    op.add_column('api_keys', sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('api_keys', sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
    op.add_column('api_keys', sa.Column('rate_limit', sa.INTEGER(), server_default=sa.text('1000'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'api_keys', type_='foreignkey')
    op.create_foreign_key('api_keys_user_id_fkey', 'api_keys', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('api_keys_tenant_id_fkey', 'api_keys', 'tenants', ['tenant_id'], ['tenant_id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_api_keys_user_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_status'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_key_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_is_deleted'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_id'), table_name='api_keys')
    op.drop_index('ix_api_key_user_status', table_name='api_keys')
    op.drop_index('ix_api_key_expires', table_name='api_keys')
    op.create_index('idx_api_keys_user', 'api_keys', ['user_id'], unique=False)
    op.create_index('idx_api_keys_tenant', 'api_keys', ['tenant_id'], unique=False)
    op.create_index('idx_api_keys_hash', 'api_keys', ['key_hash'], unique=False)
    op.create_index('idx_api_keys_expires', 'api_keys', ['expires_at'], unique=False, postgresql_where='(expires_at IS NOT NULL)')
    op.create_index('idx_api_keys_active', 'api_keys', ['is_active'], unique=False, postgresql_where='(is_active = true)')
    op.alter_column('api_keys', 'usage_count',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True,
               existing_server_default=sa.text("'0'::bigint"))
    op.alter_column('api_keys', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('api_keys', 'key_prefix',
               existing_type=sa.String(length=8),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.drop_column('api_keys', 'status')
    op.drop_column('api_keys', 'rate_limit_per_day')
    op.drop_column('api_keys', 'rate_limit_per_minute')
    op.drop_column('api_keys', 'allowed_ips')
    op.drop_column('api_keys', 'scopes')
    op.drop_column('api_keys', 'key_id')
    op.create_table('competitor_data',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('competitor_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('parent_product_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('competitor_asin', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('competitor_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('relationship_type', sa.VARCHAR(length=50), server_default=sa.text("'category'::character varying"), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('similarity_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('analysis_status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_product_id'], ['products.id'], name='competitor_data_parent_product_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], name='competitor_data_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='competitor_data_pkey')
    )
    op.create_index('idx_competitor_tenant', 'competitor_data', ['tenant_id', 'competitor_asin'], unique=False)
    op.create_index('idx_competitor_status', 'competitor_data', ['analysis_status'], unique=False)
    op.create_index('idx_competitor_parent', 'competitor_data', ['parent_product_id'], unique=False)
    op.create_index('idx_competitor_data', 'competitor_data', ['data'], unique=False, postgresql_using='gin')
    op.create_table('categories',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('keywords', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('auto_crawl', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('crawl_schedule', sa.VARCHAR(length=50), server_default=sa.text("'daily'::character varying"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], name='categories_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    sa.UniqueConstraint('tenant_id', 'name', name='categories_tenant_id_name_key')
    )
    op.create_index('idx_categories_tenant', 'categories', ['tenant_id', 'name'], unique=False)
    op.create_index('idx_categories_auto_crawl', 'categories', ['auto_crawl'], unique=False, postgresql_where='(auto_crawl = true)')
    op.create_table('tasks',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('task_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('task_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=True),
    sa.Column('progress', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], name='tasks_tenant_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='tasks_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey')
    )
    op.create_index('idx_tasks_user', 'tasks', ['user_id'], unique=False, postgresql_where='(user_id IS NOT NULL)')
    op.create_index('idx_tasks_type', 'tasks', ['task_type'], unique=False)
    op.create_index('idx_tasks_tenant', 'tasks', ['tenant_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_tasks_status_priority', 'tasks', ['status', 'priority'], unique=False)
    op.create_table('system_logs',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('log_level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('module', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('trace_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='system_logs_pkey')
    )
    op.create_index('idx_logs_trace', 'system_logs', ['trace_id'], unique=False, postgresql_where='(trace_id IS NOT NULL)')
    op.create_index('idx_logs_tenant', 'system_logs', ['tenant_id'], unique=False, postgresql_where='(tenant_id IS NOT NULL)')
    op.create_index('idx_logs_level', 'system_logs', ['log_level'], unique=False)
    op.create_index('idx_logs_created', 'system_logs', [sa.literal_column('created_at DESC')], unique=False)
    op.create_table('product_tracking_data',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('data_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('tracking_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('bsr', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rating', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('review_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('buy_box_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('availability', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('seller_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('raw_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('asin', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('bsr_rank', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('crawled_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='product_tracking_data_product_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], name='product_tracking_data_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='product_tracking_data_pkey'),
    sa.UniqueConstraint('product_id', 'tracking_date', name='product_tracking_data_product_id_tracking_date_key')
    )
    op.create_index('idx_tracking_tenant_date', 'product_tracking_data', ['tenant_id', sa.literal_column('tracking_date DESC')], unique=False)
    op.create_index('idx_tracking_product_date', 'product_tracking_data', ['product_id', sa.literal_column('tracking_date DESC')], unique=False)
    op.create_index('idx_tracking_price', 'product_tracking_data', ['price'], unique=False, postgresql_where='(price IS NOT NULL)')
    op.create_index('idx_tracking_created_at', 'product_tracking_data', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_tracking_bsr', 'product_tracking_data', ['bsr'], unique=False, postgresql_where='(bsr IS NOT NULL)')
    op.create_table('optimization_suggestions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('suggestion_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('suggestion_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('suggestion_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('estimated_impact', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('implementation_difficulty', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('generated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint('priority >= 1 AND priority <= 5', name='optimization_suggestions_priority_check'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='optimization_suggestions_product_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], name='optimization_suggestions_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='optimization_suggestions_pkey')
    )
    op.create_index('idx_suggestions_type_priority', 'optimization_suggestions', ['suggestion_type', 'priority'], unique=False)
    op.create_index('idx_suggestions_tenant', 'optimization_suggestions', ['tenant_id', sa.literal_column('generated_at DESC')], unique=False)
    op.create_index('idx_suggestions_status', 'optimization_suggestions', ['status'], unique=False)
    op.create_index('idx_suggestions_product', 'optimization_suggestions', ['product_id', 'priority'], unique=False)
    op.create_table('analysis_reports',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('report_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('report_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('ai_model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tokens_used', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('generation_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='analysis_reports_product_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'], name='analysis_reports_tenant_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='analysis_reports_pkey')
    )
    op.create_index('idx_reports_tenant', 'analysis_reports', ['tenant_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_reports_product_type', 'analysis_reports', ['product_id', 'report_type'], unique=False)
    op.create_index('idx_reports_created', 'analysis_reports', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_reports_content', 'analysis_reports', ['content'], unique=False, postgresql_using='gin')
    # ### end Alembic commands ###
